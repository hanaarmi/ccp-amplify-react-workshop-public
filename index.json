[
{
	"uri": "/1.amplify/",
	"title": "1. Amplify 로 React App 구성",
	"tags": [],
	"description": "",
	"content": " React App 을 구성하고, Amplify CLI 를 통해 AWS 인프라를 사용할 수 있도록 Amplify 환경을 설정합니다.\n 사전 설정   시작하기에 앞서 아래의 목록이 설치되어야합니다. 설치와 자세한 내용은 링크를 참고하시기 바랍니다.\n Node.js v12.x 이상 npm v5.x 이상 git v2.14.1 이상 본 워크샵은 여러분들이 Javascript/ES6 와 React 에 경험이 있다고 가정합니다. React 와 관련된 더 자세한 내용은 React Official 사이트의 튜토리얼 을 참고하시기 바랍니다.    AWS Account\n AWS Account 가 없다면, 아래 링크에서 AWS Account 를 구성하시기 바랍니다. AWS Account 만들기     Amplify CLI\n 아래의 비디오 가이드대로 Amplify CLI 를 설치하시기 바랍니다. Region 은 us-east-1 (virginia) 또는 us-west-2 (oregon) 로 선택하시기 바랍니다. 이후에 설치할 Connect 인스턴스와 동일한 리전이어야 하며, 이 두 리전에서 Connect 인스턴스를 테스트하기 용이합니다.       React App 구성   React App 을 구성합니다.\nnpx create-react-app ccp-amplify-react-demo   위 Command 를 실행하면 기본적인 ccp-amplify-react-demo 이름으로 React App 이 구성됩니다. 동일한 이름의 폴더로 이동하여, 아래와 같이 App 이 잘 구성됐는지 테스트 합니다. 앞으로 이 폴더가 프로젝트 폴더가 됩니다.\ncd ccp-amplify-react-demo npm start   브라우저가 실행되고 새로운 탭에 아래와 같은 화면이 보이면 React App 의 구성은 잘 완료된 것입니다.    Amplify CLI 로 AWS Backend 설정  Amplify 를 초기화합니다. 프로젝트 폴더에서 아래와 같이 실행합니다. 이후 CLI 실행 시 물어보는 질문에 대해서는 아래와 같이 선택합니다.  amplify init Note: It is recommended to run this command from the root of your app directory ? Do you want to use an existing environment? Yes ? Choose the environment you would like to use: dev ? Choose your default editor: Visual Studio Code Using default provider awscloudformation ⠋ Initializing your environment: dev(node:11595) ✔ Initialized provider successfully. Initialized your environment successfully. Your project has been successfully initialized and connected to the cloud! \renvironment 이름(현재는 dev)이나 default editor 설정을 변경하고 싶을 경우, 첫번째 질문시 No 를 선택하고 원하는 설정을 해도 됩니다.\n\r 위와 같이 초기화이후 아래 설정들이 완료됩니다.\n amplify 디렉토리가 만들어지고, AWS 인프라와 관련된 설정이 모두 저장됩니다. 모든 설정은 Code as a infra 방식으로 관리됩니다. (코드 방식으로 인프라의 상세 설정을 정의). aws-exports.js 파일이 만들어지고, Amplify 를 이용해 만든는 인프라와 관련된 설정이 이 파일에 설정됩니다. .gitignore 파일이 생성됩니다. AWS Account 와 연관된 설정이나 Credential 관련 정보를 가진 파일들은 git 의 대상에서 빠질 수 있도록 합니다. amplify console 명령어로 AWS Console 에 접속할 수 있습니다.    아래와 같이 Amplify Library 를 설치합니다.\n aws-amplify package 는 Amplify main library 에 해당합니다. @aws-amplify/ui-react 는 Amplify 에서 사용하는 UI 관련 Component 입니다.    npm install aws-amplify @aws-amplify/ui-react 프로젝트 폴더에서 src/index.js 를 열어 아래 내용을 이미 import 된 라이브러리 들 밑에 추가합니다.  import Amplify from \u0026#34;aws-amplify\u0026#34;; import awsExports from \u0026#34;./aws-exports\u0026#34;; Amplify.configure(awsExports); src/index.js 전체 소스코드는 다음과 같습니다.  src/index.js    import React from \u0026#39;react\u0026#39; import ReactDOM from \u0026#39;react-dom\u0026#39; import \u0026#39;./index.css\u0026#39; import App from \u0026#39;./App\u0026#39; import Amplify from \u0026#39;aws-amplify\u0026#39; import awsExports from \u0026#39;./aws-exports\u0026#39; Amplify.configure(awsExports) ReactDOM.render( \u0026lt;React.StrictMode\u0026gt; \u0026lt;App /\u0026gt; \u0026lt;/React.StrictMode\u0026gt;, document.getElementById(\u0026#39;root\u0026#39;) ) "
},
{
	"uri": "/",
	"title": "Amplify 로 React 기반 Amazon Connect CCP 구성하고, Cognito 로 SAML 기반 로그인 통합하기",
	"tags": [],
	"description": "",
	"content": "Amplify 로 React 기반 Amazon Connect CCP 구성하고, Cognito 로 SAML 기반 로그인 통합하기  Architecture  Amazon Connect 의 CCP (Contact Control Panel)을 React 기반으로 구축해봅니다.  AWS Amplify는 모바일 및 프런트 엔드 웹 개발자가 AWS에서 구동되는 안전하고 확장 가능한 풀 스택 애플리케이션을 개발하도록 지원하는 도구 및 서비스 집합입니다. Amplify를 사용하면 몇 분 만에 앱 백엔드를 구성하고 앱을 연결하며, 클릭 몇 번 만으로 정적 웹 앱을 배포하고, AWS 콘솔 외부에서 앱 콘텐츠를 쉽게 관리할 수 있습니다. Amplify 를 사용하면, AWS 인프라를 쉽게 웹프레임워크에 통합하여 개발할 수 있습니다.\n이 워크샵에서는 Amazon Connect CCP를 React 기반으로 구성합니다.\n Cognito 로 로그인/로그아웃 기능을 구현하고, Amplify 를 이용하여 API Gateway, Lambda 를 구성하여 Connect 로부터 Federation Token 을 받아와서 SAML 기반 로그인 통합을 합니다.  Amazon Cognito를 사용하면 웹과 모바일 앱에 빠르고 손쉽게 사용자 가입, 로그인 및 액세스 제어 기능을 추가할 수 있습니다. Amazon Cognito에서는 수백만의 사용자로 확장할 수 있고, Apple, Facebook, Google 및 Amazon과 같은 소셜 자격 증명 공급자와 엔터프라이즈 자격 증명 공급자(SAML 2.0 및 OpenID Connect 사용)를 통한 로그인을 지원합니다.\n이 워크샵에서는 Amplify 를 통해 Cognito 와 CCP Webapp 을 통합하고, 로그인/로그아웃 기능을 쉽게 구현해봅니다. 또한, Webapp 로그인 (Cognito 로그인)과 Connect CCP의 로그인을 SAML 기반으로 통합해봅니다. 이때, Federation Token 을 Connect 로부터 받아와야 하므로, Amplify 를 통해 API Gateway와 Lambda로 그 역할을 구현해봅니다.\n "
},
{
	"uri": "/2.connect/",
	"title": "2. Amazon Connect 인스턴스 생성",
	"tags": [],
	"description": "",
	"content": " Amazon Connect 인스턴스를 생성합니다. Amazon Connect 인스턴스란, 클라우드 콜센터 인프라 하나를 가르키는 단위입니다. 인스턴스 내부에는 콜센터를 위한 모든 인프라가 클라우드 기반으로 설치됩니다. 별도의 하드웨어 인프라를 설치할 필요 없이 인스턴스를 생성하면 모든 콜센터 관련 클라우드 인프라 및 통신사와의 연결 또한 자동 생성/관리 됩니다. 사용자는 인프라 설치 및 관리를 직접하지 않아도 됩니다.\n   AWS 콘솔 화면에서 먼저 아래 화면에서 오른쪽 위 빨간색 박스 부분에서 현재 콘솔의 리전을 확인합니다. 이 실습에서는 US EAST (N. Virginia) us-east-1 또는 US West (Oregon) us-west-2 에서 진행합니다. Amplify 를 설정했을 때 선택했던 리전과 동일하게 설정해야합니다.\n  Services 메뉴에서 Amazon Connect 를 선택합니다.   Amazon Connect 서비스 첫 시작 화면입니다. Get Started 버튼을 클릭하여 진행합니다.   만약, 아래와 같은 UI 화면이 나오면 오른쪽 위의 Try out the new console 버튼을 클릭하여 신규 UI로 전환합니다.   아래 화면에서 SAML 2.0-based authentication 을 선택합니다. Access URL 을 입력하고 Nex 버튼을 클릭하여 이동합니다. Access URL은 AWS에서 운영하는 모든 Connect 인스턴스 Access URL 중 유일한 값이어야합니다. 자신만의 이름으로 설정하도록 합니다. 또한 기록해둡니다.   Connect 에서는 3가지 계정 관리 방법을 지원합니다. 1. Connect 내부에서 계정 정보 관리, 2. 기존 Active Directory 서비스로 연결, 3. SAML 연동입니다. 본 워크샵에서는 SAML 연동을 통해 계정을 인증합니다. 기타 자세한 내용은 Amazon Connect 에서 자격 증명 관리 계획 을 참고하시기 바랍니다.\n\r Connect 인스턴스의 관리자를 설정하는 화면입니다. 여기에서는 No administrator 를 선택하고 Next 버튼을 클릭하여 진행합니다.   Incoming Call / Outgoing Call 을 모두 관리할 수 있도록 기존 설정 그대로 진행합니다. Next 버튼을 클릭합니다.   녹취, 리포트, 채팅 기록 등은 클라우드 스토리지인 S3에 저장이 됩니다. 저장 위치를 변경할 수 있습니다만, 기존 설정 그대로 진행합니다. Next 버튼을 클릭합니다.   인스턴스 생성을 위한 모든 설정을 완료했습니다. 지금까지 입력한 내용이 잘 입력되었는지 확인 후 Create Instance 버튼을 클릭하여 진행합니다.   수분 이후 인스턴스 생성이 완료됩니다.   인스턴스 생성이 완료됐습니다. 아래 화면에서 상단 메시지와 오른쪽 아래 Status 가 Active 로 되어 있으면 생성이 성공한 것입니다. 이제 왼쪽 하단의 Instance Alias 를 클릭합니다.   아래 화면에서 Access URL에 표시된 도메인 주소를 기록해둡니다. 이 정보가 인스턴스 URL입니다.   Login for emergency access 를 클릭하여 AWS 콘솔에 접속합니다.   User management 메뉴로 이동합니다.   Add new users 버튼을 클릭하여 새로운 사용자를 추가합니다.   CSV 형태의 목록을 통해 다수의 사용자를 한꺼번에 등록할 수 있지만, 여기에서는 하나의 사용자만 추가합니다.   아래와 같이 사용자 정보를 입력합니다. First name, Last name 은 자신의 정보를 알맞게 입력합니다. Login name 은 꼭 실제 사용이 가능한 이메일 주소를 사용해야합니다. Routing Profile, Security Profiles 등도 아래 화면과 같이 설정합니다. Save 버튼을 클릭하여 저장합니다. Login name 은 기록해둡니다.   Create users 를 눌러 사용자 생성을 완료하도록 합니다.   "
},
{
	"uri": "/3.ccp/",
	"title": "3. CCP 구성",
	"tags": [],
	"description": "",
	"content": " 1장에서 구성한 기본 React App 에 CCP (Contact Control Panel) 을 추가합니다. CCP는 Amazon Connect 의 기본 소프트폰을 의미합니다.\n   Connect 콘솔로 접속합니다. (AWS Console 의 Log in for emergency access 를 통해 로그인 가능합니다.) 아래 화면에서 표시된 곳의 아이콘을 클릭합니다.   아래와 같은 소프트폰이 팝업됩니다. 기본적인 Amazon Connect 의 소프트폰입니다. 이를 사용자만의 Website, Webapp 에 Embed 할 수 있습니다.   로그인한 브라우저를 닫지 않고 이후 실습 및 테스트를 위해 그대로 유지합니다. 팝업된 CCP창은 닫아도 괜찮습니다.\n\r프로젝트 Root 디렉토리에서 amazon-connect-streams SDK 를 설치합니다.  \u0026gt; npm install amazon-connect-streams  아래와 같이 코드를 수정합니다.\n src/App.js    import CCP from \u0026#39;./component/ccp/ccp.component\u0026#39; import \u0026#39;./App.css\u0026#39; function App() { return ( \u0026lt;div className=\u0026#34;App\u0026#34;\u0026gt; \u0026lt;CCP /\u0026gt; \u0026lt;/div\u0026gt; ) } export default App  src/component/ccp 디렉토리를 만들고, 그 안에 ccp.component.jsx 파일을 생성합니다. 이후 아래와 같이 코드를 작성합니다. [인스턴스 URL] 은 2.Amazon Connect 인스턴스 생성 에서 기록한 정보입니다.\n src/component/ccp/ccp.component.jsx    import React, { Component } from \u0026#39;react\u0026#39; import \u0026#39;amazon-connect-streams\u0026#39; class CCP extends Component { constructor(props) { super(props) this.ccp = React.createRef() } componentDidMount() { window.connect.core.initCCP(this.ccp.current, { ccpUrl: \u0026#39;https://[인스턴스 URL]/ccp-v2\u0026#39;, loginPopup: false, region: \u0026#39;us-east-1\u0026#39;, softphone: { allowFramedSoftphone: true, disableRingtone: false, }, }) } componentWillUnmount() { window.connect.core.terminate() if (this.ccp.current) { var iframe = this.ccp.current.firstElementChild this.ccp.current.removeChild(iframe) } } render() { return ( \u0026lt;div className=\u0026#34;ccp-container\u0026#34; style={{ height: \u0026#39;800px\u0026#39;, border: \u0026#39;2px solid\u0026#39; }} \u0026gt; \u0026lt;div id=\u0026#34;ccp\u0026#34; className=\u0026#34;ccp\u0026#34; ref={this.ccp} style={{ width: \u0026#39;100%\u0026#39;, height: \u0026#39;100%\u0026#39; }} /\u0026gt; \u0026lt;/div\u0026gt; ) } } export default CCP 이후 프로젝트 Root 디렉토리에서 아래와 같이 빌드합니다.  \u0026gt; npm start Compiled successfully! You can now view ccp-amplify-react-demo in the browser. Local: http://localhost:3000 On Your Network: http://192.168.0.47:3000 Note that the development build is not optimized. To create a production build, use yarn build.  Connect Console 에 접속했던 브라우저에서 새로운 탭을 열고 http://localhost:3000 으로 접속합니다. 아래와 같은 화면이 나오는지 확인합니다.   기본적으로 Default CCP 를 IFrame 에 Embed하여 이와 같이 여러분의 WebApp 에 적용할 수 있습니다.\n  위와 같이 소프트폰 화면이 나오지 않는다면, Connect Console 에 다시 로그인하고, 오른쪽 상단의 CCP 아이콘을 클릭하여 CCP (소프트폰)이 잘 팝업되는지 확인합니다.\n\r"
},
{
	"uri": "/4.cognito/",
	"title": "4. Cognito 로 로그인/로그아웃 구현하기",
	"tags": [],
	"description": "",
	"content": "Amplify 를 이용하여 Cognito 인증 추가하기  Amplify Framework는 Amazon Cognito를 기본 인증 공급자로 사용합니다. Amazon Cognito는 사용자 등록, 인증, 계정 복구 및 기타 작업을 처리하는 강력한 사용자 디렉토리 서비스입니다. 이 튜토리얼에서는 Amazon Cognito 및 사용자 이름/암호 로그인을 사용하여 프로그램에 인증을 추가하는 방법에 대해 알아봅니다.\n  터미널에서 아래와 같이 실행합니다. amplify 를 이용해서 인증 관련 라이브러리를 설치합니다.  ❯ amplify add auth ... Using service: Cognito, provided by: awscloudformation ... The current configured provider is Amazon Cognito. ... Do you want to use the default authentication and security configuration? Default configuration Warning: you will not be able to edit these selections. How do you want users to be able to sign in? Email Do you want to configure advanced settings? No, I am done. Successfully added auth resource ccpdemof9bde27b locally ... 터미널에서 아래와 같이 실행합니다. 로컬 소스를 빌드하고 이를 연결된 AWS 계정으로 프로비저닝합니다.  ❯ amplify push\r✔ Successfully pulled backend environment dev from the cloud.\rCurrent Environment: dev\r┌──────────┬─────────────────┬───────────┬───────────────────┐\r│ Category │ Resource name │ Operation │ Provider plugin │\r├──────────┼─────────────────┼───────────┼───────────────────┤\r│ Auth │ ccpdemof9bde27b │ Create │ awscloudformation │\r└──────────┴─────────────────┴───────────┴───────────────────┘\r? Are you sure you want to continue? Yes\r⠇ Updating resources in the cloud. This may take a few minutes...\rUPDATE_IN_PROGRESS amplify-ccpdemo-dev-145951 AWS::CloudFormation::Stack Thu Nov 04 2021 17:29:12 GMT+0900 (Korean Standard Time) User Initiated\r⠏ Updating resources in the cloud. This may take a few minutes...\r...\r✔ All resources are updated in the cloud\r 터미널에서 아래와 같이 실행합니다.  ❯ amplify console ✔ Which site do you want to open? · Console 아래 화면과 같이 Amplify 작업 이력을 확인할 수 있습니다.   설정을 잘못했을 경우에는 아래와 같이 인증 기능을 제거한 이후 다시 추가할 수 있습니다.\n\r❯ amplify status Current Environment: dev ┌──────────┬─────────────────┬───────────┬───────────────────┐ │ Category │ Resource name │ Operation │ Provider plugin │ ├──────────┼─────────────────┼───────────┼───────────────────┤ │ Auth │ ccpdemof9bde27b │ Delete │ awscloudformation │ └──────────┴─────────────────┴───────────┴───────────────────┘ ``` ❯ amplify remove auth ? Choose the resource you would want to remove ccpdemof9bde27b ? Are you sure you want to delete the resource? This action deletes all files related to this resource from t he backend directory. Yes Successfully removed resource ❯ amplify push ... ✔ Successfully pulled backend environment dev from the cloud. Current Environment: dev ┌──────────┬─────────────────┬───────────┬───────────────────┐ │ Category │ Resource name │ Operation │ Provider plugin │ ├──────────┼─────────────────┼───────────┼───────────────────┤ │ Auth │ ccpdemof9bde27b │ Delete │ awscloudformation │ └──────────┴─────────────────┴───────────┴───────────────────┘ ? Are you sure you want to continue? Yes ⠧ Updating resources in the cloud. This may take a few minutes... ... 로그인 UI 추가하기  이제 인증 서비스를 AWS에 구축했으므로 React 앱에 인증을 추가해야 합니다. 로그인 절차를 만드는 것은 상당히 어렵고 시간이 걸릴 수 있습니다. 하지만 Amplify Framework에는 aws-exports.js 파일에 지정된 구성을 사용하여 기본 UI를 손쉽게 추가할 수 있습니다.\n  withAuthenticator, AmplifySignOut 컴포넌트를 임포트합니다.  import { withAuthenticator, AmplifySignOut } from \u0026#39;@aws-amplify/ui-react\u0026#39; default export 컴포넌트를 아래와 같이 withAuthenticator 로 wrapping 합니다.  export default withAuthenticator(App) AmplifySignOut 컴포넌트를 추가합니다.  function App() { return ( \u0026lt;div className=\u0026#34;App\u0026#34;\u0026gt; \u0026lt;AmplifySignOut /\u0026gt; \u0026lt;CCP /\u0026gt; \u0026lt;/div\u0026gt; ) } 전체 소스 코드는 다음과 같습니다.  src/App.js    import { withAuthenticator, AmplifySignOut } from \u0026#39;@aws-amplify/ui-react\u0026#39; import CCP from \u0026#39;./component/ccp/ccp.component\u0026#39; import \u0026#39;./App.css\u0026#39; function App() { return ( \u0026lt;div className=\u0026#34;App\u0026#34;\u0026gt; \u0026lt;AmplifySignOut /\u0026gt; \u0026lt;CCP /\u0026gt; \u0026lt;/div\u0026gt; ) } export default withAuthenticator(App) App 을 실행합니다.  npm start  웹브라우저를 통해 아래의 화면을 확인할 수 있습니다. 로그인을 위한 Cognito 서비스의 기본 UI 입니다. Create Account 버튼을 클릭하여 새로운 계정을 생성합니다. Amplify Framework 를 사용하고, 간단한 라이브러리/컴포넌트 추가만으로 이와 같이 로그인/로그아웃 기능을 추가할 수 있습니다.   아래와 같이 본인의 정보를 이용하여 계정을 생성합니다. 이메일은 인증을 위한 확인 메일을 받아야하므로 실제 사용하는 이메일 주소를 입력해야합니다.   이후 이메일 인증을 거쳐 계정 생성을 완료합니다. 계정 생성을 완료한 이후 브라우저의 개인 정보 보호 모드로 다시 http://localhost:3000 으로 접속해봅니다. 생성한 계정으로 로그인을 완료합니다. 그러면 아래와 같은 화면을 보게됩니다. Cognito 서비스 로그인은 성공했으나, CCP 로그인 계정과는 연동이 되지 않았기 때문에, Custom CCP 는 아래와 같이 제대로 로그인 되지 않습니다.   이전 Chapter 에서 CCP 가 로그인 된 이유는, Connect Console 을 통해 로그인 한 이후 같은 브라우저에서 CCP 를 로딩했기 때문입니다. 브라우저의 개인 정보 보호모드(Chrome 브라우저의 경우 Incognito 모드)로 접속을 하면 이전 브라우저의 세션 정보가 공유되지 않기 때문에, 로그인과 같은 계정 관련 구현을 할 때는 개인 정보 보호모드로 테스트를 해야합니다. CCP 는 Firefox, Chrome 브라우저를 지원하므로 해당 브라우저에만 테스트가 가능합니다.\n\r"
},
{
	"uri": "/5.iam/",
	"title": "5. IAM 서비스에서 Role 설정하기",
	"tags": [],
	"description": "",
	"content": "IAM Role 생성  Lambda Function 생성 전에, Lambda 함수가 가져야하는 권한을 설정하도록 합니다. AWS 에서는 권한을 Role 이라는 개념으로 정의합니다. 적절한 Role 을 가져야만 Lambda 함수가 다른 서비스를 사용하여 SAML Login 에 필요한 Federation Token 을 생성할 수 있습니다.\n   IAM 서비스로 이동하여 Roles 메뉴를 선택하고 Create role 버튼을 클릭합니다.   Trusted entity 로 Lambda 서비스를 선택합니다. Role 을 사용하는 주체가 되는 서비스로 Lambda 를 선택하는 것 입니다. Lambda function 내에서 여러 서비스 (e.g. STS, Connect) 를 사용할 것이므로, Lambda 입장에서 해당 서비스를 사용할 수 있는 권한을 Role 로 정의하는 것 입니다. 이후 Next:Permissions 버튼을 클릭합니다.   Create policy 버튼을 클릭합니다.   Policy 는 권한의 종류와 세부 내용의 설정입니다. 기본적으로 만들어진 Policy 도 있지만, 2가지 Policy 를 임의로 만들도록 합니다.\n JSON 탭을 클릭합니다. 아래 JSON 코드를 복사하여 붙여 넣습니다. Next:Tags 버튼을 클릭합니다.     { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Action\u0026#34;: \u0026#34;sts:AssumeRole\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:iam::[어카운트번호]:role/CCPLogin\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34; } ] }  Tag 는 별도로 지정하지 않고 하단의 Next:Review 버튼을 클릭합니다.\n  아래와 같이 Policy 이름(stsaccess)을 지정하고, Create policy 버튼을 클릭하여 Policy 생성을 완료합니다.   하나의 Policy 를 더 생성합니다. 3~6번을 반복합니다만, 아래의 JSON 코드를 사용하고 Policy 이름은 connectapiaccess 로 지정합니다.\n  { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;VisualEditor0\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;connect:GetFederationToken\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:connect:[Connect인스턴스리전]:[어카운트번호]:instance/[인스턴스ID]/user/*\u0026#34; } ] }  2가지 Policy 생성을 완료했으면, 아래와 같이 생성한 Policy 2가지와 AWSLambdaBasicExecutionRole 을 선택합니다. (왼쪽의 체크박스를 체크합니다.) Next:Tags 버튼을 클릭하여 다음으로 이동합니다.   Next:Review 버튼을 클릭하여 다음으로 이동합니다.\n  Role name 은 CCPLogin 으로 지정하고, Policies 가 화면에 표시된대로 총 3개가 맞는지 확인합니다. (혹시 잘못됐다면, Previous 버튼을 클릭하여 이전 단계로 이동후 수정할 수 있습니다.) 이후 Create role 버튼을 클릭하여 Role 생성을 완료합니다.   "
},
{
	"uri": "/6.addrestapi/",
	"title": "6. API Gateway 와 Lambda 를 추가하여 Federation Token 가져오기",
	"tags": [],
	"description": "",
	"content": "Amplify Add API  Amplify Framework는 REST 및 GraphQL 엔드포인트에 HTTP 요청을 만드는 솔루션을 제공합니다. Amazon Connect 서비스와 연동하여 Federation Token 을 발급받고, 이 Token 을 브라우저에 저장하여 CCP 인증을 해야합니다. 이때, Federation Token 은 브라우저에서 보안 문제상 CORS 오류로 직접 가져올 수 없습니다. 반드시 Lambda 를 통해 발급받아야합니다. 따라서 Amplify Framework 의 REST API 기능을 사용하여, API Gateway, Lambda 인프라를 추가하는 실습을 진행합니다.\n  프로젝트 루트 디렉토리에서 다음 커멘드를 실행합니다.  amplify add api 실행 후 아래와 같이 선택합니다. (? 질문: 이후 답변 참조)  \r? Please select from one of the below mentioned services: REST\r? Provide a friendly name for your resource to be used as a label for this category in the project: ccplogin\r? Provide a path (e.g., /book/{isbn}): /ccp/login/{userid}\r? Choose a Lambda source: Create a new Lambda function\r? Provide an AWS Lambda function name: ccplogin\r? Choose the runtime that you want to use: NodeJS\r? Choose the function template that you want to use: Serverless ExpressJS function (Integration with API Gateway)\rAvailable advanced settings:\r- Resource access permissions\r- Scheduled recurring invocation\r- Lambda layers configuration\r- Environment variables configuration\r- Secret values configuration\r? Do you want to configure advanced settings? No\r? Do you want to edit the local lambda function now? Yes\r? Choose your default editor: Visual Studio Code [원하는 Editor 선택 가능] Edit the file in your editor: /Users/jungkon/Project/ccp-amplify-react-demo/amplify/backend/function/ccplogin/src/app.js [Lambda Function 작성]\r? Press enter to continue\rSuccessfully added resource ccplogin locally.\rNext steps:\rCheck out sample function code generated in /amplify/backend/function/ccplogin/src\r\"amplify function build\" builds all of your functions currently in the project\r\"amplify mock function \" runs your function locally\r\"amplify push\" builds all of your local backend resources and provisions them in the cloud\r\"amplify publish\" builds all of your local backend and front-end resources (if you added hosting category) and provisions them in the cloud\rSuccesfully added the Lambda function locally\r? Restrict API access Yes\r? Who should have access? Authenticated users only\r? What kind of access do you want for Authenticated users? create, read, update, delete\r? Do you want to add another path? No\rSuccessfully added resource ccplogin locally\rSome next steps:\r\"amplify push\" will build all your local backend resources and provision it in the cloud\r\"amplify publish\" will build all your local backend and frontend resources (if you have hosting category added) and provision it in the cloud\r\r위 2번을 수행하던 중 선택한 Editor 로 Lambda Fuction 을 작성할 수 있습니다. 만약, Editor 가 자동으로 해당 파일을 열지 않았다면, 위 출력 결과를 기준으로 [프로젝트 루트 디렉토리]/amplify/backend/function/ccplogin/src/app.js 를 아래와 같이 수정합니다. 또한, 아래 소스코드 중 [Connect 인스턴스 ID] 로 표기된 부분은 실제 설치한 Connect 인스턴스 ID로 대체합니다.  /* Copyright 2017 - 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved. Licensed under the Apache License, Version 2.0 (the \u0026#34;License\u0026#34;). You may not use this file except in compliance with the License. A copy of the License is located at http://aws.amazon.com/apache2.0/ or in the \u0026#34;license\u0026#34; file accompanying this file. This file is distributed on an \u0026#34;AS IS\u0026#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. */ var express = require(\u0026#39;express\u0026#39;) var bodyParser = require(\u0026#39;body-parser\u0026#39;) var awsServerlessExpressMiddleware = require(\u0026#39;aws-serverless-express/middleware\u0026#39;) const STSClient = require(\u0026#39;aws-sdk/clients/sts\u0026#39;) const ConnectClient = require(\u0026#39;aws-sdk/clients/connect\u0026#39;) // declare a new express app var app = express() app.use(bodyParser.json()) app.use(awsServerlessExpressMiddleware.eventContext()) // Enable CORS for all methods app.use(function (req, res, next) { res.header(\u0026#39;Access-Control-Allow-Origin\u0026#39;, \u0026#39;*\u0026#39;) res.header(\u0026#39;Access-Control-Allow-Headers\u0026#39;, \u0026#39;*\u0026#39;) next() }) const utilfunc = async (email) =\u0026gt; { const STS = new STSClient() const instanceId = \u0026#39;[Connect 인스턴스 ID]\u0026#39; const roleParams = { RoleArn: \u0026#39;arn:aws:iam::[Connect 인스턴스 ID]:role/CCPLogin\u0026#39;, RoleSessionName: email, DurationSeconds: 900, } const stsResult = await STS.assumeRole(roleParams) .promise() .catch((error) =\u0026gt; { console.log(error) }) console.log(stsResult) const accessParams = { accessKeyId: stsResult.Credentials.AccessKeyId, secretAccessKey: stsResult.Credentials.SecretAccessKey, sessionToken: stsResult.Credentials.SessionToken, } console.log(`accessParams: ${accessParams}`) const Connect = new ConnectClient(accessParams) const connectParams = { InstanceId: instanceId, } const connectResult = await Connect.getFederationToken(connectParams) .promise() .catch((error) =\u0026gt; { console.error(\u0026#39;CCPLogin \u0026gt;\u0026gt; Connect\u0026#39;, error) }) const ccpLoginParams = { AccessToken: connectResult.Credentials.AccessToken, AccessTokenExpiration: new Date( connectResult.Credentials.AccessTokenExpiration ).getTime(), RefreshToken: connectResult.Credentials.RefreshToken, RefreshTokenExpiration: new Date( connectResult.Credentials.RefreshTokenExpiration ).getTime(), } console.log(`ccpLoginParams: ${ccpLoginParams}`) return ccpLoginParams } /********************** * Example get method * **********************/ app.get(\u0026#39;/ccp/login/:userid\u0026#39;, function (req, res) { // Add your code here \tutilfunc(req.params.userid).then((result) =\u0026gt; { res.json({ success: \u0026#39;ok\u0026#39;, url: req.url, ccpResult: result }) }) }) app.get(\u0026#39;/ccp/login/:userid/*\u0026#39;, function (req, res) { // Add your code here \tres.json({ success: \u0026#39;get call succeed!\u0026#39;, url: req.url }) }) /**************************** * Example post method * ****************************/ app.post(\u0026#39;/ccp/login/:userid\u0026#39;, function (req, res) { // Add your code here \tres.json({ success: \u0026#39;post call succeed!\u0026#39;, url: req.url, body: req.body }) }) app.post(\u0026#39;/ccp/login/:userid/*\u0026#39;, function (req, res) { // Add your code here \tres.json({ success: \u0026#39;post call succeed!\u0026#39;, url: req.url, body: req.body }) }) /**************************** * Example put method * ****************************/ app.put(\u0026#39;/ccp/login/:userid\u0026#39;, function (req, res) { // Add your code here \tres.json({ success: \u0026#39;put call succeed!\u0026#39;, url: req.url, body: req.body }) }) app.put(\u0026#39;/ccp/login/:userid/*\u0026#39;, function (req, res) { // Add your code here \tres.json({ success: \u0026#39;put call succeed!\u0026#39;, url: req.url, body: req.body }) }) /**************************** * Example delete method * ****************************/ app.delete(\u0026#39;/ccp/login/:userid\u0026#39;, function (req, res) { // Add your code here \tres.json({ success: \u0026#39;delete call succeed!\u0026#39;, url: req.url }) }) app.delete(\u0026#39;/ccp/login/:userid/*\u0026#39;, function (req, res) { // Add your code here \tres.json({ success: \u0026#39;delete call succeed!\u0026#39;, url: req.url }) }) app.listen(3000, function () { console.log(\u0026#39;App started\u0026#39;) }) // Export the app object. When executing the application local this does nothing. However, // to port it to AWS Lambda we will create a wrapper around that will load the app from // this file module.exports = app 프로젝트 루트 디렉토리에서 아래 커멘드를 실행합니다. 완료하려면 수분동안 기다려야합니다.  amplify push 모두 완료되면 아래 커멘드로 현재 amplify 에 추가된 기능을 확인할 수 있습니다.  amplify status 아래와 같이 Function, Auth, Api 가 아래와 같이 추가되어있으면 정상입니다.\n\r❯ amplify status\rCurrent Environment: dev\r┌──────────┬─────────────────┬───────────┬───────────────────┐\r│ Category │ Resource name │ Operation │ Provider plugin │\r├──────────┼─────────────────┼───────────┼───────────────────┤\r│ Function │ ccplogin │ No Change │ awscloudformation │\r├──────────┼─────────────────┼───────────┼───────────────────┤\r│ Auth │ ccpdemo1b104119 │ No Change │ awscloudformation │\r├──────────┼─────────────────┼───────────┼───────────────────┤\r│ Api │ ccplogin │ No Change │ awscloudformation │\r└──────────┴─────────────────┴───────────┴───────────────────┘\rREST API endpoint: https://2vlz9asdz0.execute-api.us-east-1.amazonaws.com/dev\r\r아래 커멘드로 Console 에 연결하여 Lambda 함수가 제대로 반영되었는지 확인합니다.  amplify console function  \r? Please select from one of the below mentioned services: Lambda function (serverless function)\r\r아래 화면과 같이 Role 을 수정합니다.  src/component/ccp.component.jsx 를 아래와 같이 수정합니다.  import React, { Component } from \u0026#39;react\u0026#39; import { Auth } from \u0026#39;aws-amplify\u0026#39; import \u0026#39;amazon-connect-streams\u0026#39; import { ccpAuthLogin } from \u0026#39;./ccp.util\u0026#39; class CCP extends Component { constructor(props) { super(props) this.ccp = React.createRef() this.loginFrm = React.createRef() this.state = { credentials: \u0026#39;\u0026#39;, } } async componentDidMount() { const { attributes } = await Auth.currentAuthenticatedUser() console.log(attributes.email) ccpAuthLogin(attributes.email).then((result) =\u0026gt; { console.log(result.ccpResult) this.setState({ credentials: JSON.stringify(result.ccpResult) }) this.loginFrm.current.submit() window.connect.core.initCCP(this.ccp.current, { ccpUrl: \u0026#39;https://gonconnecttest.my.connect.aws/ccp-v2\u0026#39;, loginPopup: false, region: \u0026#39;us-east-1\u0026#39;, softphone: { allowFramedSoftphone: true, disableRingtone: false, }, }) //} \t}) } componentWillUnmount() { window.connect.core.terminate() var iframe = this.ccp.current.firstElementChild if (iframe) { this.ccp.current.removeChild(iframe) } } render() { return ( \u0026lt;div className=\u0026#34;ccp-container\u0026#34; style={{ height: \u0026#39;800px\u0026#39;, border: \u0026#39;2px solid\u0026#39; }} \u0026gt; \u0026lt;div id=\u0026#34;ccp\u0026#34; className=\u0026#34;ccp\u0026#34; ref={this.ccp} style={{ width: \u0026#39;100%\u0026#39;, height: \u0026#39;100%\u0026#39; }} /\u0026gt; \u0026lt;div id=\u0026#34;hidden_iframe_div\u0026#34; style={{ visibility: \u0026#39;hidden\u0026#39; }}\u0026gt; \u0026lt;iframe title=\u0026#34;hiddenframe\u0026#34; src=\u0026#34;\u0026#34; id=\u0026#34;hidden_iframe\u0026#34; name=\u0026#34;hidden_iframe\u0026#34; frameBorder=\u0026#34;0\u0026#34; style={{ visibility: \u0026#39;hidden\u0026#39; }} \u0026gt;\u0026lt;/iframe\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;loginFrm_div\u0026#34; style={{ visibility: \u0026#39;hidden\u0026#39;, textAlign: \u0026#39;left\u0026#39; }} \u0026gt; \u0026lt;form ref={this.loginFrm} id=\u0026#34;loginFrm\u0026#34; method=\u0026#34;POST\u0026#34; target=\u0026#34;hidden_iframe\u0026#34; action={ \u0026#39;https://gonconnecttest.my.connect.aws/auth/sign-in\u0026#39; } \u0026gt; \u0026lt;label htmlFor=\u0026#34;credentials\u0026#34;\u0026gt;Credentials:\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;credentials\u0026#34; id=\u0026#34;credentials\u0026#34; value={this.state.credentials} onChange={(e) =\u0026gt; { this.setState({ credentials: e.target.value }) }} /\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; ) } } export default CCP src/component/ccp.util.js 파일을 추가하고 아래와 같이 소스코드를 입력합니다.  import { API } from \u0026#39;aws-amplify\u0026#39; export const ccpAuthLogin = async (email) =\u0026gt; { const apiName = \u0026#39;ccplogin\u0026#39; const path = `/ccp/login/${email}` let result = await API.get(apiName, path) console.log(result) return await result } npm start 실행하여 테스트 합니다. 개인 정보 보호 브라우저 모드에서 http://localhost:3000 으로 접속하여, Cognito 계정으로 로그인 한 이후, CCP 가 아래와 같이 나타나면 정상입니다.  "
},
{
	"uri": "/7.attribute/",
	"title": "7. Contact Flow 에서 설정한 Attribute 값 가져오기",
	"tags": [],
	"description": "",
	"content": " Contact Flow 에서 다양한 Attribute 를 설정하고, 이를 CCP 에서 받아 정보를 표시할 수 있습니다.\n Contact Flow 에서 Attribute 설정하기  Connect Console 로 접속하여, 아래와 같이 Contact flows 를 선택합니다.  Sample note for screenpop Contact flow을 선택합니다.  아래와 같은 Contact flow 에서 Set contact attributes 를 선택합니다.  CCP 에서 전달 받을 Attributes 를 임의로 입력할 수 있습니다. 여기에서는 아래와 같은 정보를 입력해봅니다. 이후 Save 버튼을 클릭하여 저장합니다.  phonenumber : 010-1234-5679 firstname : Jungkon lastname : Kim Contact flow 를 Save 한 이후 Publish합니다.  Phone numbers 메뉴로 이동합니다.  발급받은 전화번호를 클릭합니다.  연결된 Contact flow / IVR 로 위에서 편집한 Sample note for screenpop 을 선택한 이후 Save 버튼을 클릭하여 저장합니다.  Custom CCP 에 정보 보여주기  src/component/ccp/ccp.component.jsx 의 componentDidMonut() 함수의 마지막 부분에 아래 소스를 추가합니다.  window.connect.contact(function (contact) { contact.onConnected(function () { document.getElementById( \u0026#39;logMsgs\u0026#39; ).innerHTML = `onConnected(${contact.getContactId()})\u0026lt;br\u0026gt;` var attributeMap = contact.getAttributes() var note = JSON.stringify(attributeMap[\u0026#39;note\u0026#39;][\u0026#39;value\u0026#39;]) var phonenumber = JSON.stringify( attributeMap[\u0026#39;phonenumber\u0026#39;][\u0026#39;value\u0026#39;] ) var firstname = JSON.stringify( attributeMap[\u0026#39;firstname\u0026#39;][\u0026#39;value\u0026#39;] ) var lastname = JSON.stringify( attributeMap[\u0026#39;lastname\u0026#39;][\u0026#39;value\u0026#39;] ) console.log(attributeMap) console.log(note) document.getElementById( \u0026#39;logMsgs\u0026#39; ).innerHTML += `${note}\u0026lt;br\u0026gt;${phonenumber}\u0026lt;br\u0026gt;${firstname}\u0026lt;br\u0026gt;${lastname}\u0026lt;br\u0026gt;` }) src/component/ccp/ccp.component.jsx 의 render() 함수의 마지막 부분에 아래 소스를 추가합니다.  \u0026lt;div id=\u0026#34;logMsgsContainer\u0026#34; className=\u0026#34;logMsgsContainer\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;Log Messages\u0026lt;/h2\u0026gt; \u0026lt;div id=\u0026#34;logMsgs\u0026#34; ref=\u0026#34;{this.logMsgs}\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; src/component/ccp/ccp.component.scss 파일을 추가하고, 아래 소스를 입력합니다.  .ccp-container { width: 100%; height: 800px; border: \u0026#39;2px solid\u0026#39;; flex-direction: row; display: flex; align-items: flex-start; .ccp { width: 50%; height: 100%; } .hidden_iframe_div { width: 0; } .loginFrm_div { width: 0; } .logMsgsContainer { width: 50%; height: 100%; margin: 20px; } } src/component/ccp/ccp.component.jsx 에 ccp.component.scss 를 import 합니다.  import \u0026#39;./ccp.component.scss\u0026#39; src/component/ccp/ccp.component.jsx 전체 소스코드는 아래와 같습니다.  import React, { Component } from \u0026#39;react\u0026#39; import { Auth } from \u0026#39;aws-amplify\u0026#39; import \u0026#39;amazon-connect-streams\u0026#39; import { ccpAuthLogin } from \u0026#39;./ccp.util\u0026#39; import \u0026#39;./ccp.component.scss\u0026#39; class CCP extends Component { constructor(props) { super(props) this.ccp = React.createRef() this.loginFrm = React.createRef() this.state = { credentials: \u0026#39;\u0026#39;, } this.logMsgs = React.createRef() } async componentDidMount() { const { attributes } = await Auth.currentAuthenticatedUser() console.log(attributes.email) ccpAuthLogin(attributes.email).then((result) =\u0026gt; { console.log(result.ccpResult) this.setState({ credentials: JSON.stringify(result.ccpResult) }) this.loginFrm.current.submit() window.connect.core.initCCP(this.ccp.current, { ccpUrl: \u0026#39;https://[인스턴스URL]/ccp-v2\u0026#39;, loginPopup: false, region: \u0026#39;us-east-1\u0026#39;, softphone: { allowFramedSoftphone: true, disableRingtone: false, }, }) window.connect.contact(function (contact) { contact.onConnected(function () { document.getElementById( \u0026#39;logMsgs\u0026#39; ).innerHTML = `onConnected(${contact.getContactId()})\u0026lt;br\u0026gt;` var attributeMap = contact.getAttributes() var note = JSON.stringify(attributeMap[\u0026#39;note\u0026#39;][\u0026#39;value\u0026#39;]) var phonenumber = JSON.stringify( attributeMap[\u0026#39;phonenumber\u0026#39;][\u0026#39;value\u0026#39;] ) var firstname = JSON.stringify( attributeMap[\u0026#39;firstname\u0026#39;][\u0026#39;value\u0026#39;] ) var lastname = JSON.stringify( attributeMap[\u0026#39;lastname\u0026#39;][\u0026#39;value\u0026#39;] ) console.log(attributeMap) console.log(note) document.getElementById( \u0026#39;logMsgs\u0026#39; ).innerHTML += `${note}\u0026lt;br\u0026gt;${phonenumber}\u0026lt;br\u0026gt;${firstname}\u0026lt;br\u0026gt;${lastname}\u0026lt;br\u0026gt;` }) }) }) } componentWillUnmount() { window.connect.core.terminate() var iframe = this.ccp.current.firstElementChild if (iframe) { this.ccp.current.removeChild(iframe) } } render() { return ( \u0026lt;div className=\u0026#34;ccp-container\u0026#34;\u0026gt; \u0026lt;div id=\u0026#34;ccp\u0026#34; className=\u0026#34;ccp\u0026#34; ref={this.ccp} /\u0026gt; \u0026lt;div id=\u0026#34;hidden_iframe_div\u0026#34; style={{ visibility: \u0026#39;hidden\u0026#39; }} className=\u0026#34;hidden_iframe_div\u0026#34; \u0026gt; \u0026lt;iframe title=\u0026#34;hiddenframe\u0026#34; src=\u0026#34;\u0026#34; id=\u0026#34;hidden_iframe\u0026#34; name=\u0026#34;hidden_iframe\u0026#34; frameBorder=\u0026#34;0\u0026#34; style={{ visibility: \u0026#39;hidden\u0026#39; }} \u0026gt;\u0026lt;/iframe\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;loginFrm_div\u0026#34; className=\u0026#34;loginFrm_div\u0026#34; style={{ visibility: \u0026#39;hidden\u0026#39;, textAlign: \u0026#39;left\u0026#39; }} \u0026gt; \u0026lt;form ref={this.loginFrm} id=\u0026#34;loginFrm\u0026#34; method=\u0026#34;POST\u0026#34; target=\u0026#34;hidden_iframe\u0026#34; action={ \u0026#39;https://[인스턴스URL]/auth/sign-in\u0026#39; } \u0026gt; \u0026lt;label htmlFor=\u0026#34;credentials\u0026#34;\u0026gt;Credentials:\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;credentials\u0026#34; id=\u0026#34;credentials\u0026#34; value={this.state.credentials} onChange={(e) =\u0026gt; { this.setState({ credentials: e.target.value }) }} /\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;logMsgsContainer\u0026#34; className=\u0026#34;logMsgsContainer\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;Log Messages\u0026lt;/h2\u0026gt; \u0026lt;div id=\u0026#34;logMsgs\u0026#34; ref={this.logMsgs}\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; ) } } export default CCP npm start 를 실행하여 테스트합니다. 위에서 기록한 전화번호로 전화를 걸어 Attributes 들이 제대로 표시되는지도 확인합니다. 전화가 걸려오면 CCP에서 Accept 를 합니다. 그러면 아래와 같이 화면 오른쪽에 Contact flow 에서 입력했던 Attributes 들의 내용을 확인할 수 있습니다.  "
},
{
	"uri": "/8.customerprofiles/",
	"title": "8. Customer Profiles 기능 추가하기",
	"tags": [],
	"description": "",
	"content": " Amazon Connect Customer Profiles 는 여러 외부 애플리케이션의 고객 정보를 Amazon Connect의 연락처 기록과 빠르게 결합할 수 있도록 사전 구축된 통합을 제공합니다. 이를 통해 고객 상호 작용 중에 에이전트에게 필요한 모든 정보를 한 곳에서 확인할 수 있는 고객 프로파일을 만들 수 있습니다.\n Customer Profiels 설정하기  Amazon Connect 서비스로 이동하여 생성한 인스턴스를 선택합니다.  왼쪽 메뉴에서 Customer Profiles 를 선택하고, Enable Customer Profiles 버튼을 클릭합니다.  Create new domain 을 선택하고 Domain name 을 입력합니다. 고객 정보를 관리할 회사 이름이나 특정 목적을 잘 알 수 있도록 이름을 설정하면 됩니다.  Customer Profiles 는 모든 고객 정보를 암호화하여 저장합니다. 따라서, 암호화 Key 를 만들어야합니다. 암호화 Key는 KMS 서비스를 통해 생성/관리할 수 있습니다. 아래 버튼을 클릭하여 KMS Key 를 생성해보도록 합니다.  Symmetric Key type 을 선택하고 Next 버튼을 클릭합니다.  Alias 이름을 입력하고 Next 버튼을 클릭합니다.   Define key administrative permissions 페이지는 Next 버튼을 클릭하여 넘어갑니다.\n  Define key usage permissions 페이지는 Next 버튼을 클릭하여 넘어갑니다.\n  아래와 같이 Key 가 만들어졌습니다.\n  다시 Customer Profiels 를 생성하던 Tab 으로 이동합니다. Specify KMS key box 에서 방금 전 생성한 Key 를 선택합니다.  Enable Customer Profiles 버튼을 클릭하여 생성을 마무리합니다.  Customer Profiles domain 정보와 KMS Key 를 확인합니다.  CCP 에 Customer Profiles 삽입  src/component/ccp/ccp.component.jsx 파일의 componentDidMount() 함수를 아래와 같이 수정합니다.  async componentDidMount() { const { attributes } = await Auth.currentAuthenticatedUser() console.log(attributes.email) ccpAuthLogin(attributes.email).then((result) =\u0026gt; { console.log(result.ccpResult) this.setState({ credentials: JSON.stringify(result.ccpResult) }) this.loginFrm.current.submit() window.connect.agentApp.initApp( \u0026#39;ccp\u0026#39;, \u0026#39;ccp\u0026#39;, \u0026#39;https://[Connect인스턴스URL]/ccp-v2/\u0026#39; ) window.connect.agentApp.initApp( \u0026#39;customerprofiles\u0026#39;, \u0026#39;customprofile\u0026#39;, \u0026#39;https://[Connect인스턴스URL]/customerprofiles-v2/\u0026#39; ) window.connect.contact(function (contact) { contact.onConnected(function () { document.getElementById( \u0026#39;logMsgs\u0026#39; ).innerHTML = `onConnected(${contact.getContactId()})\u0026lt;br\u0026gt;` var attributeMap = contact.getAttributes() var note = JSON.stringify(attributeMap[\u0026#39;note\u0026#39;][\u0026#39;value\u0026#39;]) var phonenumber = JSON.stringify( attributeMap[\u0026#39;phonenumber\u0026#39;][\u0026#39;value\u0026#39;] ) var firstname = JSON.stringify( attributeMap[\u0026#39;firstname\u0026#39;][\u0026#39;value\u0026#39;] ) var lastname = JSON.stringify( attributeMap[\u0026#39;lastname\u0026#39;][\u0026#39;value\u0026#39;] ) console.log(attributeMap) console.log(note) document.getElementById( \u0026#39;logMsgs\u0026#39; ).innerHTML += `${note}\u0026lt;br\u0026gt;${phonenumber}\u0026lt;br\u0026gt;${firstname}\u0026lt;br\u0026gt;${lastname}\u0026lt;br\u0026gt;` }) }) }) } src/component/ccp/ccp.component.jsx 파일의 render() 함수에서 첫부분을 아래와 같이 수정합니다.  render() { return ( \u0026lt;div className=\u0026#34;ccp-container\u0026#34;\u0026gt; \u0026lt;div id=\u0026#34;ccp\u0026#34; className=\u0026#34;ccp\u0026#34; ref={this.ccp} /\u0026gt; \u0026lt;div id=\u0026#34;customprofile\u0026#34; className=\u0026#34;customprofile\u0026#34; /\u0026gt; \u0026lt;div id=\u0026#34;hidden_iframe_div\u0026#34; style={{ visibility: \u0026#39;hidden\u0026#39; }} className=\u0026#34;hidden_iframe_div\u0026#34; \u0026gt; src/component/ccp/ccp.component.scss 파일에, 아래와 같이 수정합니다.  .ccp-container { width: 100%; height: 800px; border: \u0026#39;2px solid\u0026#39;; flex-direction: row; display: flex; align-items: flex-start; .ccp { width: 40%; height: 100%; } .customprofile { width: 40%; height: 100%; } .hidden_iframe_div { width: 0; } .loginFrm_div { width: 0; } .logMsgsContainer { width: 20%; height: 100%; margin: 20px; } } npm start 를 실행하여 테스트를 진행합니다. 전화를 걸고 Accept 를 했을 때 아래와 같은 화면이 보입니다. Edit 버튼을 클릭하여 고객 정보를 수정할 수 있습니다.  "
},
{
	"uri": "/9.chattest/",
	"title": "9. Chat 테스트 하기",
	"tags": [],
	"description": "",
	"content": " Amazon Connect 는 기본 기능으로 Chat 을 지원합니다. Chat 을 테스트 하기 위해서는 Amazon Connect Console 에서 바로 테스트 해볼 수 있습니다. 또한, 기본 적인 UX 를 Javascript 코드로 제공하므로 여러분의 웹사이트에 쉽게 적용할 수 있습니다. 여기에서는 Chat 기능을 테스트 하고 Javascript 코드를 받는 방법을 알아봅니다.\n Chat 테스트 하기  Connect Console 에 접속합니다. 첫화면에서 Test chat 항목을 클릭합니다.  Activate the Contact Control Panel 을 클릭하여 CCP (Contact Control Panel)을 활성화합니다.  CCP 의 왼족 상단의 드롭다운 메뉴를 통해 상담원의 상태를 Available 로 전환합니다. Chat 또는 Voice call 을 받을 수 있는 상태로 변경이 됩니다.  하단의 Chat 아이콘을 클릭합니다. Chat 아이콘을 기준으로 왼쪽 화면은 콜센터 고객의 웹사이트 화면이라고 볼 수 있습니다. 오른쪽 화면은 상담사의 소프트폰 화면이라고 볼 수 있습니다.  왼쪽의 Chat 화면을 통해 대화를 시작하면 상담원에게 신호가 가게 됩니다. 상담원은 CCP 의 Accept chat 버튼을 클릭해 Chat 상담을 시작할 수 있습니다.  Chat 설정 변경해보기  새로운 탭을 열어, Connect Console에서 Contact flow 메뉴로 이동합니다.  Sample disconnect flow 를 선택합니다. Sample disconnect flow 는 통화 종료 후 (상담원이 통화를 종료한 이후)의 시나리오를 정의할 수 있습니다. 그러므로 Chat 을 종료했던 고객이 다시 재개할 경우 동작을 정의할 수도 있습니다.  Wait Command block 을 클릭하여 설정합니다. Wait Command block 은 Chat 세션을 얼마나 길게 유지할지 설정 할 수 있습니다. 또한, 세션 만료 시간내에 고객이 Chat을 재개했을 경우와 세션 만료 시간 이후에 접속했을 경우를 분기하여 메시지를 다르게 전송하는 등의 시나리오 분기가 가능합니다.  아래와 같이 세션 유지 시간을 변경할 수 있습니다. 세션 유지 시간을 변경하여 분기를 테스트 해보실 수 있습니다.  다시 Contact flow 메뉴로 이동하여, Sample inbound flow Contact flow 를 선택합니다.  현재 Chat 테스트는 Sample inbound flow 로 진입하도록 설정되어 있습니다. 아래 화면과 같이 Set disconnect flow Command block 을 통해, 상담원이 통화를 종료한 직후 위에서 설정한 Set disconnect flow 가 실행이 되게 됩니다.  Set disconnect flow Command block 을 클릭하면, 아래와 같이 다른 Contact flow 를 Disconnect flow 로 설정할 수 있습니다.  다시 Test chat 화면으로 돌아와서 Test settings 항목을 클릭합니다.  여기에서는 현재 Chat 테스트 화면의 설정을 변경할 수 있습니다. 특히 진입시의 시나리오를 담당할 Contact flow 를 지정할 수 있습니다. 위에서 살펴본대로 현재 Sample inbound flow 가 설정되어 있는 것을 확인할 수 있습니다.  "
},
{
	"uri": "/10.fbmessenger1/",
	"title": "10. Facebook Messenger Chat 결합 1",
	"tags": [],
	"description": "",
	"content": " Amazon Connect Chat 과 연동할 수 있는 클라이언트는 다양합니다. 기본적으로 웹 사이트에 Javascript 형태로 embed 할 수 있습니다. 또한, Social messenger provider 와의 결합도 API 형태로 지원합니다. 여기에서는 Facebook messenger 와 연동을 통해 상담을 할 수 있게 만들어 봅니다.\n Facebook messenger 설정  Facebook messenger 설정을 진행합니다. Facebook App 을 만들고, Messenger 기능을 사용 할 수 있도록 설정합니다. 이 Messenger를 통해 Amazon Connect 의 상담사와 대화할 수 있습니다.\n  Meta(Facebook) for Developers사이트 https://developers.facebook.com 로 이동합니다. My Apps 메뉴를 클릭합니다. Create App 메뉴를 클릭합니다.  Type 으로 Business 를 선택합니다. Display name, App Contact Email 정보를 입력하고 Create App 버튼을 클릭합니다.  Settings -\u0026gt; Basic 메뉴로 이동합니다. Show 버튼을 클릭하고 App Secrect 정보를 복사하여 기록해둡니다. 이후 설정 시 사용할 예정입니다.  Dashboard 메뉴로 이동합니다. Messenger 항목의 Set up 버튼을 클릭합니다.   Create New Page 버튼을 클릭합니다. (새로운 탭이 열립니다.)\n  Page Name, Category 정보를 입력하고 Make a page 버튼을 클릭합니다.\n  다시 이전 탭으로 돌아와서 Add or Remove Pages 를 클릭합니다. 로그인 관련 팝업이 보이고, 위에서 만든 페이지를 선택하며, 기타 설정등을 진행합니다.\n  Generate Token 버튼을 클릭하여 Token 정보를 확인합니다. 이 정보는 기록해둡니다.  AWS Secret Manager 설정  AWS Console 에 접속합니다. Secret Manager 서비스로 이동합니다. Store a new secret 버튼을 클릭합니다.  Other type of secret 을 선택하고, Key/value 로 앞서 기록해 둔 App Secret 정보와 Page Token 정보를 아래와 같이 입력합니다. VERIFY_TOKEN은 임의의 문자열을 입력하고 이를 기록해둡니다. 이후 Next 버튼을 클릭합니다.  이후 Secret name 을 입력하고 Next 버튼을 클릭하여 진행합니다. 이후 Next 버튼을 클릭하고 Store 버튼을 클릭하여 저장합니다. 이후 Secret Manager 초기 화면에서 생성한 Secret 을 선택한 후 Secret ARN 정보를 기록해둡니다.  Amazon Connect Instance 정보 기록  AWS Console 에서 Amazon Connect 서비스로 이동합니다. 이전 장에서 생성했던 인스턴스를 클릭합니다.  아래 ARN 정보를 기록해둡니다.  아래 링크를 통해 Connect Console 에 접속합니다.  Connect Console에 접속한 이후 Contact flows 메뉴로 이동 후, Sample inbound flow (first contact experience) 를 클릭합니다. 아래 화면과 같이 Contact flow ARN 을 복사합니다.  위에서 복사한 Contact flow ARN 중에서 아래 강조된 부분과 같이 Contact flow ID 만 복사하여 기록해둡니다. Contact flow ID 는 참고로 이와 같은 형태의 숫자와 문자의 조합입니다. ex) 4893202c-0002-4b3c-887c-4125b523f051  \rarn:aws:connect:[Region]:[Account ID]:instance/[Amazon Connect Instance ID]/contact-flow/[Contact flow ID]\r\r"
},
{
	"uri": "/11.fbmessenger2/",
	"title": "11. Facebook Messenger Chat 결합 2",
	"tags": [],
	"description": "",
	"content": " 이번 장에서는 AWS CDK 서비스를 이용하여 인프라 및 관련 코드를 Deploy 해보겠습니다.\n AWS CDK 설치  이미 CDK 를 Install 하신 분들은 다음 항목으로 넘어갑니다. CDK Install 을 위헤서는 AWS CLI 도 미리 설치되어 있어야합니다. AWS CLI 는 다음 링크를 참고하시기 바랍니다. Getting started with the AWS CLI    npm -g install typescript npm -g install aws-cdk cdk bootstrap aws://ACCOUNT_ID/AWS_REGION 프로젝트 배포   아래의 정보들이 미리 준비되어야합니다. 이전 장을 진행하면서 모두 기록해둔 정보입니다. 다시 한번 정리하시기 바랍니다.\n Amazon Connect Instance ARN  ex) arn:aws:connect:us-east-1:111111111111:instance/3c01b303-4353-4619-c236-8e9989414a56   Amazon Connect Contact flow ID  ex) 3c01b303-4353-4619-c236-8e9989414a56   AWS Secert Manager ARN  ex) arn:aws:secretsmanager:ap-northeast-1:111111111111:secret:VoicemailSecret-HiKLP-VH3umh      Git 을 이용하여 아래와 같이 message streaming api repository 를 복제합니다.\n  git clone git@github.com:amazon-connect/amazon-connect-message-streaming-examples.git 아래의 디렉토리로 이동합니다.  cd amazon-connect-message-streaming-examples 아래와 같이 dependency module 들을 설치합니다.  npm install cd src/lambda/inboundMessageHandler npm install cd ../../.. cd src/lambda/outboundMessageHandler npm install cd ../../.. cd src/lambda/digitalChannelHealthCheck npm install cd ../../.. 아래와 같이 CDK 프로젝트를 배포합니다. 위 1번에서 정리한 정보들을 잘 입력하여 실행합니다.  cdk deploy \\ --context fbSecretArn=[AWS Secert Manager ARN] \\ --context amazonConnectArn=[Amazon Connect Instance ARN] \\ --context contactFlowId=[Amazon Connect Contact flow ID] 프로젝트가 모두 배포되기까지 수 분 정도 소요됩니다. 배포가 완료되고 나면 FacebookApiGatewayWebhook 정보를 기록해둡니다.  Facebook Callback URL 설정  Meta(Facebook) for Developers사이트 Meta for Developers 로 이동합니다. 이전 장에서 만든 앱을 클릭합니다. Messenger, Settings 메뉴로 이동합니다. Webhooks 밑의 Callback URL 부분에 FacebookApiGatewayWebhook URL 을 입력합니다. Verify Token 으로는, 이전 장AWS Secret Manager 설정 에서 설정한 VERIFY_TOKEN 값을 입력합니다.  Add Subscriptions 버튼을 클릭합니다.  messages 항목을 선택합니다.  Save 버튼을 클릭합니다.  Chat 테스트  8장에서 완성했던 CCP 를 접속합니다. 또는, Amazon Connect Console 에 접속해서 아래와 같이 오른쪽 상단의 아이콘을 클릭하여 기본 CCP를 접속하셔도 됩니다.  CCP 에서 왼쪽 상단의 상담원 상태를 Available 로 변경합니다.  Facebook 에 접속합니다. 아래 화면과 같이 Messenger 아이콘을 클릭하고, 이전에 만들었던 앱을 클릭합니다.  아래와 같이 채팅창에서 테스트 메시지를 보내봅니다. CCP에서 Accpet 를 하면 채팅을 시작할 수 있습니다.  "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/credits/",
	"title": "Credits",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]